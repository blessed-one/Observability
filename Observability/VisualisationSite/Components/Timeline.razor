@using Microsoft.JSInterop
@using Realisation
@using VisualisationSite.Models
@using VisualisationSite.Services
@inject TraceService TraceService
@inject IJSRuntime JSRuntime

<div class="timeline-container">
    <div class="timeline-header">
        <h3>Timeline</h3>
        <div class="timeline-controls">
            <button class="btn btn-sm btn-outline-secondary" @onclick="ZoomIn">+</button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ZoomOut">-</button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ResetZoom">Reset</button>
        </div>
    </div>

    <div class="timeline-content" @ref="_timelineRef">
        @if (_traces == null)
        {
            <div class="loading">Loading...</div>
        }
        else
        {
            <div class="timeline-ruler">
                @foreach (var tick in GetTimeTicks())
                {
                    <div class="timeline-tick" style="left: @(GetTickPosition(tick))px">
                        <div class="tick-line"></div>
                        <div class="tick-label">@tick.ToString("HH:mm:ss.fff")</div>
                    </div>
                }
            </div>

            <div class="timeline-tracks">
                @foreach (var trace in _traces)
                {
                    <div class="timeline-track" style="top: @(GetTrackPosition(trace))px">
                        <div class="timeline-bar @GetTraceClass(trace)"
                             style="left: @(GetBarPosition(trace))px; width: @(GetBarWidth(trace))px"
                             @onmouseover="() => ShowTooltip(trace)"
                             @onmouseout="HideTooltip">
                            <div class="timeline-bar-label">@trace.GetMethod() @trace.GetPath()</div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    @if (_selectedTrace != null)
    {
        <div class="timeline-tooltip" style="left: @(_tooltipX)px; top: @(_tooltipY)px">
            <div class="tooltip-header">
                <span class="method">@_selectedTrace.GetMethod()</span>
                <span class="path">@_selectedTrace.GetPath()</span>
            </div>
            <div class="tooltip-content">
                <div>Host: @_selectedTrace.GetHost()</div>
                <div>Duration: @_selectedTrace.GetDuration()ms</div>
                <div>Memory: @(_selectedTrace.GetMemory() / 1024)KB</div>
                <div>CPU: @_selectedTrace.GetCpu()</div>
            </div>
        </div>
    }
</div>

@code {
    private ElementReference _timelineRef;
    private double _zoomLevel = 1.0;
    private DateTime _startTime;
    private DateTime _endTime;
    private ObservabilityRecord? _selectedTrace;
    private double _tooltipX;
    private double _tooltipY;
    private IEnumerable<ObservabilityRecord>? _traces;
    private double _timelineWidth;

    protected override async Task OnInitializedAsync()
    {
        await LoadTraces();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateTimelineWidth();
        }
    }

    private async Task UpdateTimelineWidth()
    {
        _timelineWidth = await JSRuntime.InvokeAsync<double>("eval", "document.querySelector('.timeline-content').clientWidth");
        StateHasChanged();
    }

    private async Task LoadTraces()
    {
        Console.WriteLine("Timeline.razor: try to load traces");
        _traces = await TraceService.GetTraces();
        Console.WriteLine("Timeline.razor: traces loaded");
        UpdateTimeRange();
        await UpdateTimelineWidth();
        StateHasChanged();
    }

    private void UpdateTimeRange()
    {
        if (_traces == null || !_traces.Any()) return;

        _startTime = _traces.Min(t => t.Timestamp);
        _endTime = _traces.Max(t => t.Timestamp);
    }

    private IEnumerable<DateTime> GetTimeTicks()
    {
        if (_startTime == default || _endTime == default) return Enumerable.Empty<DateTime>();

        var duration = _endTime - _startTime;
        var tickCount = Math.Max(5, Math.Min(20, (int)(duration.TotalMilliseconds / 1000)));
        var tickInterval = duration.TotalMilliseconds / tickCount;

        return Enumerable.Range(0, tickCount + 1)
            .Select(i => _startTime.AddMilliseconds(i * tickInterval));
    }

    private double GetTickPosition(DateTime time)
    {
        var totalDuration = (_endTime - _startTime).TotalMilliseconds;
        var position = (time - _startTime).TotalMilliseconds / totalDuration;
        return position * _timelineWidth * _zoomLevel;
    }

    private double GetTrackPosition(ObservabilityRecord trace)
    {
        if (_traces == null) return 0;
        var index = _traces.ToList().IndexOf(trace);
        return index * 40; // 40px per track
    }

    private double GetBarPosition(ObservabilityRecord trace)
    {
        return GetTickPosition(trace.Timestamp);
    }

    private double GetBarWidth(ObservabilityRecord trace)
    {
        return trace.GetDuration() * _zoomLevel;
    }

    private string GetTraceClass(ObservabilityRecord trace)
    {
        var host = trace.GetHost().ToLower();
        if (host.Contains("balancer")) return "balancer";
        if (host.Contains("localhost")) return "client";
        return "service";
    }

    private async Task ZoomIn()
    {
        _zoomLevel *= 1.2;
        await UpdateTimelineWidth();
        StateHasChanged();
    }

    private async Task ZoomOut()
    {
        _zoomLevel /= 1.2;
        await UpdateTimelineWidth();
        StateHasChanged();
    }

    private async Task ResetZoom()
    {
        _zoomLevel = 1.0;
        await UpdateTimelineWidth();
        StateHasChanged();
    }

    private void ShowTooltip(ObservabilityRecord trace)
    {
        _selectedTrace = trace;
        _tooltipX = GetBarPosition(trace);
        _tooltipY = GetTrackPosition(trace);
    }

    private void HideTooltip()
    {
        _selectedTrace = null;
    }
}

<style>
    .timeline-container {
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 1rem;
        height: 100%;
        display: flex;
        flex-direction: column;
        position: relative;
    }

    .timeline-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .timeline-controls {
        display: flex;
        gap: 0.5rem;
    }

    .timeline-content {
        flex: 1;
        position: relative;
        overflow: auto;
        min-height: 300px;
    }

    .timeline-ruler {
        position: sticky;
        top: 0;
        height: 30px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #ddd;
    }

    .timeline-tick {
        position: absolute;
        height: 100%;
    }

    .tick-line {
        position: absolute;
        bottom: 0;
        width: 1px;
        height: 10px;
        background-color: #666;
    }

    .tick-label {
        position: absolute;
        bottom: 12px;
        transform: translateX(-50%);
        font-size: 0.8em;
        color: #666;
    }

    .timeline-tracks {
        position: relative;
        margin-top: 30px;
    }

    .timeline-track {
        position: absolute;
        height: 30px;
        width: 100%;
    }

    .timeline-bar {
        position: absolute;
        height: 20px;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        align-items: center;
        padding: 0 8px;
        font-size: 0.8em;
        color: white;
        overflow: hidden;
        white-space: nowrap;
    }

    .timeline-bar.balancer {
        background-color: #1976d2;
    }

    .timeline-bar.service {
        background-color: #2e7d32;
    }

    .timeline-bar.client {
        background-color: #ed6c02;
    }

    .timeline-tooltip {
        position: absolute;
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        z-index: 1000;
    }

    .tooltip-header {
        margin-bottom: 4px;
    }

    .tooltip-header .method {
        font-weight: bold;
        margin-right: 8px;
    }

    .tooltip-content {
        font-size: 0.9em;
    }

    .loading {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        color: #666;
        font-style: italic;
    }
</style> 