Архитектура:
1. API Gateway
    Принимает запросы от клиента
    Балансит запросы от клиента
    Балансит запросы от сервисов друг к другу
    Возвращает ответы клиенту
    Отправляет свои трейсы/логи/метрики в хранилище

2. Сервисы 1 и 2
    Получает запросы от балансера
    Обрабатывает запросы
    Обращаются друг к другу через балансер
    (Начинаем без реплики)    Каждый сервис имеет реплику
    На каждом шаге возвращает свои трейсы/логи/метрики в хранилище

3. Хранилище
    Собирает все логи/трейсы/метрики со всех узлов
    Позволяет выполнять поиск
    ПЛАН МАКС: Визуализация через

4. Логи
    trace_id
    Информация по запросу/ответу
    

Путь запроса:
    1. Пользователь обращается в Gateway
    2. Gateway выбирает реплику сервиса1 и отправляет запрос ему
    3. Сервис1 обрабатывает запрос, посылает запрос к сервису 2 через gateway
    4. Gateway выбирает реплику сервиса2 и отправляет запрос ему
    5. Сервис2 обрабатывает запрос, отправляет ответ  gateway
    6. Gateway передаёт ответ сервиса2 сервису1
    7. Сервис1 заканчивает свою обработку и отправляет ответ gateway
    8. Gateway передаёт ответ сервиса клиенту
    * На каждом  шаге каждый узел отправляет логи в хранилище


Реализация:
1. API Gateway
    балансировка запросов от пользователя в сервис1 через кольцевой linked list
    балансировка запросов от сервиса1 в сервис2 через кольцевой linked list
    
    логирует:
        получение запроса от клиента
         работа балансировщика
        отправка запроса сервису1
        получение запроса от сервиса1
         работа балансировщика
        отправка запроса сервису2
        получение ответа от сервиса2
        передача ответа от сервиса2 сервису1
        получение ответа от сервиса1
        ответ клиенту
    
2. Сервис 1
    имитирует какую-то деятельность (ждёт случайное время)
    идёт в gateway чтобы обратиться к сервису2
    возвращает ответ gateway по окончании обработки запроса
    
    логирует:
        получение запроса от gateway
         обработка запроса часть 1
        запрос gateway для сервиса2
        получение ответа от gateway
         обработка запроса часть 2
        возвращение ответа gateway
    
3. Сервис 2
    имитирует какую-то деятельность, но имеет вероятность багануть (ждёт слишком долго, ...) (баги потом)
    возвращает ответ gateway по окончании обработки запроса

    логирует:
        получение запроса от gateway
         обработка запроса (bug)
        возвращение ответа gateway


4. Хранилище
    получает логи от узлов
    
    минимум:
        логи хранаться в MongoDB (мб есть что-то специализированное)
        вытаскивать логи по трейсу, по приложению, по времени
        
    максимум
        логи хранятся в Meilisearch
        визуализация в Grafana и Prometheus
        критические ошибки в тг бота
        
    	
5. Логи
    json
    тип лога/метрика
    узелId
    время создания
    сообщение
    состояние (ошибка или нет)

    лога:
        traceId
        parentId
        http инфа
    
    метрика:    
        ПЛАН МАКСИМУМ: формат метрики для prometheus
        ПЛАН МИНИМУМ: время выполнения, бизнес сущность, тип (ошибка или нет), сколько памяти использовалось, загрузка цп


